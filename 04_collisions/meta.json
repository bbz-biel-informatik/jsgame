{
  "icon": "/images/collision.png",
  "title": "Kollisionen",
  "description": "Um zu überprüfen, ob sich zwei Objekte überlappen, werden sogenannte Kollisionen verwendet. Dieses Kapitel beschreibt, wie die Kollision von Objekten abgefragt werden kann.",
  "steps": [
    "Die Kollisionserkennung baut auf dem Grundgerüst auf. Es sollte also grob diese Struktur vorhanden sein. **Wichtig**: steuerbare Objekte müssen mit `position: absolute` positioniert werden!",

    "Zuerst benötigen wir einige Gegner. Dazu definieren wir sie im HTML-Code, stylen sie in der CSS-Date und wählen sie schliesslich mit `querySelector()` im Javascript-Code *vor dem Game-Loop* aus.",

    "Um Kollisionen erkennen zu können, müssen wir die Datei `collision.js` einbinden. Diese muss vor der eigenen game.js-Datei eingebunden werden.",

    "Die Datei `collision.js` stellt uns zwei Funktionen zur Verfügung: `isColliding()` und `getCollisions()`. Der Unterschied liegt darin, dass Funktion `isColliding()` nur überprüft, ob eine Kollision passiert ist, nicht aber, welche Objekte daran beteiligt sind. `getCollisions()` hingegen liefert die beteiligten Objekte.",

    "Dadurch, dass `isColliding()` nur meldet, ob überhaupt eine Kollision passiert, ist die z.B. dazu geeignet, das Spiel abzubrechen, wenn der Spieler in ein Hindernis läuft. In diesem Fall spielt es keine Rolle, welches Hindernis der Spieler berührt hat.",

    "Dadurch, dass `getCollisions()` die an der Kollision beteiligten Objekte zurückmeldet, ist sie z.B. dafür geeignet, getroffene Gegner zu entfernen. Hier ist es wichtig, welche Gegner getroffen wurden, deshalb kann nur `getCollisions()` verwendet werden."

  ]
}
